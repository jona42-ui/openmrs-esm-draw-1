var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// Internal Imports
import { Events } from '../../interfaces';
import { GeoProjection } from '../essentials/geo-projection';
// D3 imports
import { select } from 'd3-selection';
var Choropleth = /** @class */ (function (_super) {
    __extends(Choropleth, _super);
    function Choropleth() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 'choropleth';
        return _this;
    }
    Choropleth.prototype.render = function (animate) {
        var _this = this;
        if (animate === void 0) { animate = true; }
        _super.prototype.render.call(this);
        var data = this.model.getCombinedData();
        var svg = this.getComponentContainer({ withinChartClip: true });
        var geo = svg.select('g.geo');
        geo.selectAll('path')
            .classed('border', true)
            .attr('class', function (d) {
            return _this.model.getColorClassName({
                value: data[d.properties.NAME].value,
                originalClassName: "border",
            });
        });
        this.addCountryAreaEventListener();
    };
    Choropleth.prototype.addCountryAreaEventListener = function () {
        var self = this;
        var data = this.model.getCombinedData();
        this.parent
            .selectAll('path.border')
            .on('mouseover', function (event, datum) {
            var hoveredElement = select(this);
            // Dispatch mouse over event
            self.services.events.dispatchEvent(Events.Choropleth.CHOROPLETH_MOUSEOVER, {
                event: event,
                element: hoveredElement,
                datum: data[datum.properties.NAME],
            });
            // Dispatch tooltip show event
            self.services.events.dispatchEvent(Events.Tooltip.SHOW, {
                event: event,
                hoveredElement: hoveredElement,
                items: [
                    {
                        label: datum.properties.NAME,
                        value: data[datum.properties.NAME].value,
                    },
                ],
            });
        })
            .on('mousemove', function (event, datum) {
            // Dispatch mouse move event
            self.services.events.dispatchEvent(Events.Choropleth.CHOROPLETH_MOUSEMOVE, {
                event: event,
                element: select(this),
                datum: data[datum.properties.NAME],
            });
            // Dispatch tooltip move event
            self.services.events.dispatchEvent(Events.Tooltip.MOVE, {
                event: event,
            });
        })
            .on('click', function (event, datum) {
            // Dispatch mouse click event
            self.services.events.dispatchEvent(Events.Choropleth.CHOROPLETH_CLICK, {
                event: event,
                element: select(this),
                datum: data[datum.properties.NAME],
            });
        })
            .on('mouseout', function (event, datum) {
            var hoveredElement = select(this);
            // Dispatch mouse out event
            self.services.events.dispatchEvent(Events.Choropleth.CHOROPLETH_MOUSEOUT, {
                event: event,
                element: hoveredElement,
                datum: data[datum.properties.NAME],
            });
            // Dispatch hide tooltip event
            self.services.events.dispatchEvent(Events.Tooltip.HIDE, {
                event: event,
                hoveredElement: hoveredElement,
            });
        });
    };
    return Choropleth;
}(GeoProjection));
export { Choropleth };
//# sourceMappingURL=../../../src/components/graphs/choropleth.js.map