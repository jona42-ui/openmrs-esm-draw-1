{"version":3,"file":"geo-projection.js","sourceRoot":"","sources":["geo-projection.ts"],"names":[],"mappings":"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","sourcesContent":["// Internal Imports\nimport { Component } from '../component';\nimport { DOMUtils } from '../../services';\nimport * as Tools from '../../tools';\nimport { RenderTypes, Projection } from '../../interfaces';\n\n// D3 imports\nimport { geoPath, line } from 'd3';\nimport { feature, merge } from 'topojson-client';\nimport {\n\t// Azimuthal Projections - project the sphere directly on to the plane\n\tgeoEqualEarth,\n\t// Conic projections - project the sphere onto a cone & unroll into the plane\n\tgeoAlbers,\n\tgeoConicEqualArea,\n\tgeoConicEquidistant,\n\t// Cylindrical projections - project the sphere onto a containing cylinder & unroll onto the plane\n\tgeoEquirectangular,\n\tgeoMercator,\n\tgeoNaturalEarth1,\n} from 'd3-geo';\n\nexport class GeoProjection extends Component {\n\ttype = 'geo';\n\trenderType = RenderTypes.SVG;\n\n\trender() {\n\t\tconst svg = this.getComponentContainer({ withinChartClip: true });\n\t\tconst { width, height } = DOMUtils.getSVGElementSize(svg, {\n\t\t\tuseAttrs: true,\n\t\t});\n\n\t\t// Because of a Firefox bug with regards to sizing & d3 packs,\n\t\t// rather than checking if height or width aren't 0,\n\t\t// we have to make sure they're not smaller than 1\n\t\tif (width < 1 || height < 1) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get users projection\n\t\tconst projection = this.getProjection();\n\n\t\tconst geoData = Tools.getProperty(this.getOptions(), 'geoData');\n\n\t\tconst data = this.model.getCombinedData();\n\n\t\t// Seperate countries that have data & countries with missing data\n\t\tconst withData = {};\n\t\tconst withoutData = {};\n\t\tObject.keys(data).forEach((element) => {\n\t\t\tif (typeof data[element].value === 'number') {\n\t\t\t\twithData[element] = data[element];\n\t\t\t} else {\n\t\t\t\twithoutData[element] = data[element];\n\t\t\t}\n\t\t});\n\n\t\t// Merge all without data\n\t\tconst withoutDataMerge = merge(geoData, Object.values(withoutData));\n\n\t\t/**\n\t\t * @todo - Currently only topojson is supported\n\t\t *\n\t\t * Unlike geojson, topojson does not have a standard format\n\t\t * So data must be nested in the following format:\n\t\t * options : {\n\t\t * \tgeoData: {\n\t\t *  \tobjects: {\n\t\t * \t\t\t...\n\t\t * \t\t}\n\t\t *  }\n\t\t * }\n\t\t */\n\t\t// Convert from topojson to geojson\n\t\tconst json = feature(geoData, {\n\t\t\t// We need to specify that we are converting geometry collections\n\t\t\ttype: 'GeometryCollection',\n\t\t\tgeometries: Object.values(withData),\n\t\t});\n\n\t\t// Depending on the projection selected, we will need to scale/translate accordingly\n\t\tconst projectionScale = projection.fitSize([width, height], json);\n\t\tconst geo = geoPath().projection(projectionScale);\n\n\t\tconst borders = DOMUtils.appendOrSelect(svg, 'g.geo');\n\t\tborders\n\t\t\t.selectAll('path')\n\t\t\t.data(json.features)\n\t\t\t.join('path')\n\t\t\t.attr('d', geo);\n\n\t\tconst patternID = this.services.domUtils.generateElementIDString(\n\t\t\t`geo-pattern-stripes`\n\t\t);\n\n\t\t// Create a striped pattern for missing data\n\t\tconst defs = DOMUtils.appendOrSelect(svg, 'defs');\n\t\tDOMUtils.appendOrSelect(defs, 'pattern')\n\t\t\t.attr('id', patternID)\n\t\t\t.attr('width', 5)\n\t\t\t.attr('height', 10)\n\t\t\t.attr('patternUnits', 'userSpaceOnUse')\n\t\t\t.attr('patternTransform', 'rotate(45)')\n\t\t\t.append('path')\n\t\t\t.classed('pattern-fill', true)\n\t\t\t.attr(\n\t\t\t\t'd',\n\t\t\t\tline()([\n\t\t\t\t\t[0, 0],\n\t\t\t\t\t[0, 10],\n\t\t\t\t])\n\t\t\t);\n\n\t\tconst missingBorders = DOMUtils.appendOrSelect(svg, 'g.missing-data');\n\t\tDOMUtils.appendOrSelect(missingBorders, 'path')\n\t\t\t.datum(withoutDataMerge)\n\t\t\t.attr('d', geo)\n\t\t\t.style('fill', `url(#${patternID})`);\n\t}\n\n\t/**\n\t * @info\n\t * Depending on projection, we may need to provide additional configuration\n\t * e.g. sizing\n\t *\n\t * In such case, function can be refactored so that\n\t * projection should return an object with the configuraiton & function\n\t */\n\tgetProjection() {\n\t\tlet projection = null;\n\t\tconst projectionSelected = Tools.getProperty(\n\t\t\tthis.getOptions(),\n\t\t\t'thematic',\n\t\t\t'projection'\n\t\t);\n\n\t\tswitch (projectionSelected) {\n\t\t\t// Azimuthal Projections\n\t\t\tcase Projection.geoEqualEarth:\n\t\t\t\tprojection = geoEqualEarth();\n\t\t\t\tbreak;\n\t\t\t// Conic Projections\n\t\t\tcase Projection.geoAlbers:\n\t\t\t\tprojection = geoAlbers();\n\t\t\t\tbreak;\n\t\t\tcase Projection.geoConicEqualArea:\n\t\t\t\tprojection = geoConicEqualArea();\n\t\t\t\tbreak;\n\t\t\tcase Projection.geoConicEquidistant:\n\t\t\t\tprojection = geoConicEquidistant();\n\t\t\t\tbreak;\n\t\t\t// Cyndrical projections\n\t\t\tcase Projection.geoEquirectangular:\n\t\t\t\tprojection = geoEquirectangular();\n\t\t\t\tbreak;\n\t\t\tcase Projection.geoMercator:\n\t\t\t\tprojection = geoMercator();\n\t\t\t\tbreak;\n\t\t\tcase Projection.geoNaturalEarth1:\n\t\t\t\tprojection = geoNaturalEarth1();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// Projection is missing or an unsupported projection value is passed\n\t\t\t\tthrow new Error('Projection is not supported.');\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn projection;\n\t}\n}\n"]}