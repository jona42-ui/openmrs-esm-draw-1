{"version":3,"file":"color-scale-utils.js","sourceRoot":"","sources":["color-scale-utils.ts"],"names":[],"mappings":"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","sourcesContent":["// Internal Imports\nimport * as Tools from '../tools';\n\n// d3 imports\nimport { extent } from 'd3-array';\nimport { scaleQuantize, scaleLinear } from 'd3-scale';\n\nexport function getDomain(data) {\n\tconst limits = extent(data, (d: any) => d.value);\n\tconst domain = scaleLinear()\n\t\t.domain(limits as [number, number])\n\t\t.nice()\n\t\t.domain();\n\n\t// Ensuring limits start at 0 to make scale look more `nicer`\n\tif (domain[0] > 0) {\n\t\tdomain[0] = 0;\n\t} else if (domain[0] === 0 && domain[1] === 0) {\n\t\t// Range cannot be between 0 and 0 (itself)\n\t\treturn [0, 1];\n\t}\n\n\t// Ensure the median of the range is 0 if domain extends into both negative & positive\n\tif (domain[0] < 0 && domain[1] > 0) {\n\t\tif (Math.abs(domain[0]) > domain[1]) {\n\t\t\tdomain[1] = Math.abs(domain[0]);\n\t\t} else {\n\t\t\tdomain[0] = -domain[1];\n\t\t}\n\t}\n\n\treturn domain;\n}\n\nexport function getColorScale(displayData, colorOptions) {\n\tconst customColors = Tools.getProperty(colorOptions, 'gradient', 'colors');\n\tconst customColorsEnabled = !Tools.isEmpty(customColors);\n\n\tlet colorPairingOption = Tools.getProperty(\n\t\tcolorOptions,\n\t\t'pairing',\n\t\t'option'\n\t);\n\n\t// If domain consists of negative and positive values, use diverging palettes\n\tconst domain = getDomain(displayData);\n\tconst colorScheme = domain[0] < 0 && domain[1] > 0 ? 'diverge' : 'mono';\n\n\t// Use default color pairing options if not in defined range\n\tif (\n\t\tcolorPairingOption < 1 &&\n\t\tcolorPairingOption > 4 &&\n\t\tcolorScheme === 'mono'\n\t) {\n\t\tcolorPairingOption = 1;\n\t} else if (\n\t\tcolorPairingOption < 1 &&\n\t\tcolorPairingOption > 2 &&\n\t\tcolorScheme === 'diverge'\n\t) {\n\t\tcolorPairingOption = 1;\n\t}\n\n\t// Uses css classes for fill\n\tconst colorPairing = customColorsEnabled ? customColors : [];\n\n\tif (!customColorsEnabled) {\n\t\t// Add class names to list and the amount based on the color scheme\n\t\t// Carbon charts has 11 colors for a single monochromatic palette & 17 for a divergent palette\n\t\tconst colorGroupingLength = colorScheme === 'diverge' ? 17 : 11;\n\t\tfor (let i = 1; i < colorGroupingLength + 1; i++) {\n\t\t\tcolorPairing.push(`fill-${colorScheme}-${colorPairingOption}-${i}`);\n\t\t}\n\t}\n\n\t// Return generated color scale\n\treturn scaleQuantize()\n\t\t.domain(domain as [number, number])\n\t\t.range(colorPairing);\n}\n"]}