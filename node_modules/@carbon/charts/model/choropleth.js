var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
// Internal Imports
import { ChartModel } from './model';
import * as Tools from '../tools';
import { getColorScale } from '../services';
/**
 * Base thematic maps chart model layer
 */
var ChoroplethModel = /** @class */ (function (_super) {
    __extends(ChoroplethModel, _super);
    function ChoroplethModel(services) {
        var _this = _super.call(this, services) || this;
        _this._colorScale = undefined;
        // Holds a mapping of geometry objects to data objects
        // Allows us to access data faster
        _this._matrix = {};
        return _this;
    }
    /**
     * @override
     * @param value
     * @returns string
     */
    ChoroplethModel.prototype.getFillColor = function (value) {
        return this._colorScale(value);
    };
    /**
     * Helper function that will generate a dictionary
     */
    ChoroplethModel.prototype.getCombinedData = function () {
        var _this = this;
        if (Tools.isEmpty(this._matrix)) {
            var options = this.getOptions();
            var data = this.getDisplayData();
            if (!Tools.isEmpty(data) &&
                !Tools.isEmpty(options.geoData.objects.countries)) {
                /**
                 * @todo
                 * We can either use name or id by default to generate this dictionary
                 * Curently id & name are standard in geoJSON. Unfortunately, topojson does not have any standard
                 * so feature objects can have any key. We suggest that they include name or id at the very least
                 *
                 * May need to provide users with the option to pass in keys to create dictionary with
                 */
                options.geoData.objects.countries.geometries.forEach(function (country) {
                    _this._matrix[country.properties.NAME] = country;
                });
                data.forEach(function (value) {
                    if (_this._matrix[value.name]) {
                        _this._matrix[value.name]['value'] = value.value || null;
                    }
                    else {
                        console.warn("Data point " + value + " is missing geographical data.");
                    }
                });
            }
        }
        return this._matrix;
    };
    /**
     * Generate tabular data from display data
     * @returns Array<Object>
     */
    ChoroplethModel.prototype.getTabularDataArray = function () {
        var displayData = this.getDisplayData();
        var result = __spreadArrays([
            ['Country ID', 'Country Name', 'Value']
        ], displayData.map(function (datum) { return [
            datum['id'] === null ? '&ndash;' : datum['id'],
            datum['name'],
            datum['value'],
        ]; }));
        return result;
    };
    // Uses quantize scale to return class names
    ChoroplethModel.prototype.getColorClassName = function (configs) {
        return configs.originalClassName + " " + this._colorScale(configs.value);
    };
    ChoroplethModel.prototype.setColorClassNames = function () {
        var colorOptions = Tools.getProperty(this.getOptions(), 'color');
        this._colorScale = getColorScale(this.getDisplayData(), colorOptions);
    };
    return ChoroplethModel;
}(ChartModel));
export { ChoroplethModel };
//# sourceMappingURL=../../src/model/choropleth.js.map