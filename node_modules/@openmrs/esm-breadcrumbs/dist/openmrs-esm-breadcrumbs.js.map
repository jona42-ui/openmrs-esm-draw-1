{"version":3,"file":"openmrs-esm-breadcrumbs.js","mappings":"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","sources":["webpack://@openmrs/esm-breadcrumbs/external system \"@openmrs/esm-state\"","webpack://@openmrs/esm-breadcrumbs/webpack/bootstrap","webpack://@openmrs/esm-breadcrumbs/webpack/runtime/define property getters","webpack://@openmrs/esm-breadcrumbs/webpack/runtime/hasOwnProperty shorthand","webpack://@openmrs/esm-breadcrumbs/webpack/runtime/make namespace object","webpack://@openmrs/esm-breadcrumbs/../../../node_modules/path-to-regexp/dist.es2015/index.js","webpack://@openmrs/esm-breadcrumbs/./src/db.ts","webpack://@openmrs/esm-breadcrumbs/./src/filter.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__685__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Tokenize input string.\n */\nfunction lexer(str) {\n    var tokens = [];\n    var i = 0;\n    while (i < str.length) {\n        var char = str[i];\n        if (char === \"*\" || char === \"+\" || char === \"?\") {\n            tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n            continue;\n        }\n        if (char === \"\\\\\") {\n            tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n            continue;\n        }\n        if (char === \"{\") {\n            tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n            continue;\n        }\n        if (char === \"}\") {\n            tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n            continue;\n        }\n        if (char === \":\") {\n            var name = \"\";\n            var j = i + 1;\n            while (j < str.length) {\n                var code = str.charCodeAt(j);\n                if (\n                // `0-9`\n                (code >= 48 && code <= 57) ||\n                    // `A-Z`\n                    (code >= 65 && code <= 90) ||\n                    // `a-z`\n                    (code >= 97 && code <= 122) ||\n                    // `_`\n                    code === 95) {\n                    name += str[j++];\n                    continue;\n                }\n                break;\n            }\n            if (!name)\n                throw new TypeError(\"Missing parameter name at \" + i);\n            tokens.push({ type: \"NAME\", index: i, value: name });\n            i = j;\n            continue;\n        }\n        if (char === \"(\") {\n            var count = 1;\n            var pattern = \"\";\n            var j = i + 1;\n            if (str[j] === \"?\") {\n                throw new TypeError(\"Pattern cannot start with \\\"?\\\" at \" + j);\n            }\n            while (j < str.length) {\n                if (str[j] === \"\\\\\") {\n                    pattern += str[j++] + str[j++];\n                    continue;\n                }\n                if (str[j] === \")\") {\n                    count--;\n                    if (count === 0) {\n                        j++;\n                        break;\n                    }\n                }\n                else if (str[j] === \"(\") {\n                    count++;\n                    if (str[j + 1] !== \"?\") {\n                        throw new TypeError(\"Capturing groups are not allowed at \" + j);\n                    }\n                }\n                pattern += str[j++];\n            }\n            if (count)\n                throw new TypeError(\"Unbalanced pattern at \" + i);\n            if (!pattern)\n                throw new TypeError(\"Missing pattern at \" + i);\n            tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n            i = j;\n            continue;\n        }\n        tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n    }\n    tokens.push({ type: \"END\", index: i, value: \"\" });\n    return tokens;\n}\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str, options) {\n    if (options === void 0) { options = {}; }\n    var tokens = lexer(str);\n    var _a = options.prefixes, prefixes = _a === void 0 ? \"./\" : _a;\n    var defaultPattern = \"[^\" + escapeString(options.delimiter || \"/#?\") + \"]+?\";\n    var result = [];\n    var key = 0;\n    var i = 0;\n    var path = \"\";\n    var tryConsume = function (type) {\n        if (i < tokens.length && tokens[i].type === type)\n            return tokens[i++].value;\n    };\n    var mustConsume = function (type) {\n        var value = tryConsume(type);\n        if (value !== undefined)\n            return value;\n        var _a = tokens[i], nextType = _a.type, index = _a.index;\n        throw new TypeError(\"Unexpected \" + nextType + \" at \" + index + \", expected \" + type);\n    };\n    var consumeText = function () {\n        var result = \"\";\n        var value;\n        // tslint:disable-next-line\n        while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n            result += value;\n        }\n        return result;\n    };\n    while (i < tokens.length) {\n        var char = tryConsume(\"CHAR\");\n        var name = tryConsume(\"NAME\");\n        var pattern = tryConsume(\"PATTERN\");\n        if (name || pattern) {\n            var prefix = char || \"\";\n            if (prefixes.indexOf(prefix) === -1) {\n                path += prefix;\n                prefix = \"\";\n            }\n            if (path) {\n                result.push(path);\n                path = \"\";\n            }\n            result.push({\n                name: name || key++,\n                prefix: prefix,\n                suffix: \"\",\n                pattern: pattern || defaultPattern,\n                modifier: tryConsume(\"MODIFIER\") || \"\"\n            });\n            continue;\n        }\n        var value = char || tryConsume(\"ESCAPED_CHAR\");\n        if (value) {\n            path += value;\n            continue;\n        }\n        if (path) {\n            result.push(path);\n            path = \"\";\n        }\n        var open = tryConsume(\"OPEN\");\n        if (open) {\n            var prefix = consumeText();\n            var name_1 = tryConsume(\"NAME\") || \"\";\n            var pattern_1 = tryConsume(\"PATTERN\") || \"\";\n            var suffix = consumeText();\n            mustConsume(\"CLOSE\");\n            result.push({\n                name: name_1 || (pattern_1 ? key++ : \"\"),\n                pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,\n                prefix: prefix,\n                suffix: suffix,\n                modifier: tryConsume(\"MODIFIER\") || \"\"\n            });\n            continue;\n        }\n        mustConsume(\"END\");\n    }\n    return result;\n}\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile(str, options) {\n    return tokensToFunction(parse(str, options), options);\n}\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction(tokens, options) {\n    if (options === void 0) { options = {}; }\n    var reFlags = flags(options);\n    var _a = options.encode, encode = _a === void 0 ? function (x) { return x; } : _a, _b = options.validate, validate = _b === void 0 ? true : _b;\n    // Compile all the tokens into regexps.\n    var matches = tokens.map(function (token) {\n        if (typeof token === \"object\") {\n            return new RegExp(\"^(?:\" + token.pattern + \")$\", reFlags);\n        }\n    });\n    return function (data) {\n        var path = \"\";\n        for (var i = 0; i < tokens.length; i++) {\n            var token = tokens[i];\n            if (typeof token === \"string\") {\n                path += token;\n                continue;\n            }\n            var value = data ? data[token.name] : undefined;\n            var optional = token.modifier === \"?\" || token.modifier === \"*\";\n            var repeat = token.modifier === \"*\" || token.modifier === \"+\";\n            if (Array.isArray(value)) {\n                if (!repeat) {\n                    throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to not repeat, but got an array\");\n                }\n                if (value.length === 0) {\n                    if (optional)\n                        continue;\n                    throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to not be empty\");\n                }\n                for (var j = 0; j < value.length; j++) {\n                    var segment = encode(value[j], token);\n                    if (validate && !matches[i].test(segment)) {\n                        throw new TypeError(\"Expected all \\\"\" + token.name + \"\\\" to match \\\"\" + token.pattern + \"\\\", but got \\\"\" + segment + \"\\\"\");\n                    }\n                    path += token.prefix + segment + token.suffix;\n                }\n                continue;\n            }\n            if (typeof value === \"string\" || typeof value === \"number\") {\n                var segment = encode(String(value), token);\n                if (validate && !matches[i].test(segment)) {\n                    throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to match \\\"\" + token.pattern + \"\\\", but got \\\"\" + segment + \"\\\"\");\n                }\n                path += token.prefix + segment + token.suffix;\n                continue;\n            }\n            if (optional)\n                continue;\n            var typeOfMessage = repeat ? \"an array\" : \"a string\";\n            throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to be \" + typeOfMessage);\n        }\n        return path;\n    };\n}\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match(str, options) {\n    var keys = [];\n    var re = pathToRegexp(str, keys, options);\n    return regexpToFunction(re, keys, options);\n}\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction(re, keys, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.decode, decode = _a === void 0 ? function (x) { return x; } : _a;\n    return function (pathname) {\n        var m = re.exec(pathname);\n        if (!m)\n            return false;\n        var path = m[0], index = m.index;\n        var params = Object.create(null);\n        var _loop_1 = function (i) {\n            // tslint:disable-next-line\n            if (m[i] === undefined)\n                return \"continue\";\n            var key = keys[i - 1];\n            if (key.modifier === \"*\" || key.modifier === \"+\") {\n                params[key.name] = m[i].split(key.prefix + key.suffix).map(function (value) {\n                    return decode(value, key);\n                });\n            }\n            else {\n                params[key.name] = decode(m[i], key);\n            }\n        };\n        for (var i = 1; i < m.length; i++) {\n            _loop_1(i);\n        }\n        return { path: path, index: index, params: params };\n    };\n}\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str) {\n    return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options) {\n    return options && options.sensitive ? \"\" : \"i\";\n}\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path, keys) {\n    if (!keys)\n        return path;\n    // Use a negative lookahead to match only capturing groups.\n    var groups = path.source.match(/\\((?!\\?)/g);\n    if (groups) {\n        for (var i = 0; i < groups.length; i++) {\n            keys.push({\n                name: i,\n                prefix: \"\",\n                suffix: \"\",\n                modifier: \"\",\n                pattern: \"\"\n            });\n        }\n    }\n    return path;\n}\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(paths, keys, options) {\n    var parts = paths.map(function (path) { return pathToRegexp(path, keys, options).source; });\n    return new RegExp(\"(?:\" + parts.join(\"|\") + \")\", flags(options));\n}\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(path, keys, options) {\n    return tokensToRegexp(parse(path, options), keys, options);\n}\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(tokens, keys, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.strict, strict = _a === void 0 ? false : _a, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode = _d === void 0 ? function (x) { return x; } : _d;\n    var endsWith = \"[\" + escapeString(options.endsWith || \"\") + \"]|$\";\n    var delimiter = \"[\" + escapeString(options.delimiter || \"/#?\") + \"]\";\n    var route = start ? \"^\" : \"\";\n    // Iterate over the tokens and create our regexp string.\n    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n        var token = tokens_1[_i];\n        if (typeof token === \"string\") {\n            route += escapeString(encode(token));\n        }\n        else {\n            var prefix = escapeString(encode(token.prefix));\n            var suffix = escapeString(encode(token.suffix));\n            if (token.pattern) {\n                if (keys)\n                    keys.push(token);\n                if (prefix || suffix) {\n                    if (token.modifier === \"+\" || token.modifier === \"*\") {\n                        var mod = token.modifier === \"*\" ? \"?\" : \"\";\n                        route += \"(?:\" + prefix + \"((?:\" + token.pattern + \")(?:\" + suffix + prefix + \"(?:\" + token.pattern + \"))*)\" + suffix + \")\" + mod;\n                    }\n                    else {\n                        route += \"(?:\" + prefix + \"(\" + token.pattern + \")\" + suffix + \")\" + token.modifier;\n                    }\n                }\n                else {\n                    route += \"(\" + token.pattern + \")\" + token.modifier;\n                }\n            }\n            else {\n                route += \"(?:\" + prefix + suffix + \")\" + token.modifier;\n            }\n        }\n    }\n    if (end) {\n        if (!strict)\n            route += delimiter + \"?\";\n        route += !options.endsWith ? \"$\" : \"(?=\" + endsWith + \")\";\n    }\n    else {\n        var endToken = tokens[tokens.length - 1];\n        var isEndDelimited = typeof endToken === \"string\"\n            ? delimiter.indexOf(endToken[endToken.length - 1]) > -1\n            : // tslint:disable-next-line\n                endToken === undefined;\n        if (!strict) {\n            route += \"(?:\" + delimiter + \"(?=\" + endsWith + \"))?\";\n        }\n        if (!isEndDelimited) {\n            route += \"(?=\" + delimiter + \"|\" + endsWith + \")\";\n        }\n    }\n    return new RegExp(route, flags(options));\n}\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(path, keys, options) {\n    if (path instanceof RegExp)\n        return regexpToRegexp(path, keys);\n    if (Array.isArray(path))\n        return arrayToRegexp(path, keys, options);\n    return stringToRegexp(path, keys, options);\n}\n//# sourceMappingURL=index.js.map","/** @module @category Breadcrumb */\nimport { pathToRegexp } from \"path-to-regexp\";\nimport { createGlobalStore } from \"@openmrs/esm-state\";\nimport { BreadcrumbSettings, BreadcrumbRegistration } from \"./types\";\n\nconst store = createGlobalStore<Array<BreadcrumbRegistration>>(\n  \"breadcrumbs\",\n  []\n);\n\nfunction getMatcher(settings: BreadcrumbSettings) {\n  if (settings.matcher instanceof RegExp) {\n    return settings.matcher;\n  } else if (typeof settings.matcher === \"string\") {\n    return pathToRegexp(settings.matcher);\n  } else {\n    return pathToRegexp(settings.path);\n  }\n}\n\nexport function registerBreadcrumb(breadcrumb: BreadcrumbSettings) {\n  return registerBreadcrumbs([breadcrumb]);\n}\n\nexport function registerBreadcrumbs(breadcrumbs: Array<BreadcrumbSettings>) {\n  const prevBreadcrumbs = getBreadcrumbs();\n  const newBreadcrumbs = breadcrumbs.map((settings) => ({\n    matcher: getMatcher(settings),\n    settings,\n  }));\n  const nextBreadcrumbs = [...prevBreadcrumbs, ...newBreadcrumbs];\n  store.setState(nextBreadcrumbs, true);\n}\n\nexport function getBreadcrumbs() {\n  return store.getState();\n}\n","/** @module @category Breadcrumb */\nimport { getBreadcrumbs } from \"./db\";\nimport { BreadcrumbRegistration } from \"./types\";\n\nfunction getExact(\n  breadcrumbs: Array<BreadcrumbRegistration>,\n  path: string\n): BreadcrumbRegistration {\n  const [bc] = breadcrumbs.filter((m) => m.matcher.test(path));\n  return bc;\n}\n\nfunction getClosest(\n  breadcrumbs: Array<BreadcrumbRegistration>,\n  path: string\n): BreadcrumbRegistration | undefined {\n  const segments = path.split(\"/\");\n\n  while (segments.length > 1) {\n    segments.pop();\n    const newPath = segments.join(\"/\");\n    const next = getNext(breadcrumbs, newPath);\n\n    if (next) {\n      return next;\n    }\n  }\n\n  return undefined;\n}\n\nfunction getNext(\n  breadcrumbs: Array<BreadcrumbRegistration>,\n  path: string | undefined\n) {\n  if (path) {\n    return getExact(breadcrumbs, path) || getClosest(breadcrumbs, path);\n  }\n\n  return undefined;\n}\n\nexport function filterBreadcrumbs(\n  list: Array<BreadcrumbRegistration>,\n  path: string\n) {\n  if (list.length > 0) {\n    const current = getNext(list, path);\n\n    if (current) {\n      const links = [current];\n      let previous = getNext(list, current.settings.parent);\n\n      while (previous !== undefined) {\n        links.push(previous);\n        previous = getNext(list, previous.settings.parent);\n      }\n\n      return links.reverse();\n    }\n  }\n\n  return [];\n}\n\nexport function getBreadcrumbsFor(path: string) {\n  const breadcrumbs = getBreadcrumbs();\n  return filterBreadcrumbs(breadcrumbs, path);\n}\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__685__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","escapeString","str","replace","flags","options","sensitive","stringToRegexp","path","keys","tokens","_a","strict","_b","start","_c","end","_d","encode","x","endsWith","delimiter","route","_i","tokens_1","length","token","prefix","suffix","pattern","push","modifier","mod","endToken","isEndDelimited","indexOf","RegExp","tokensToRegexp","i","char","type","index","count","j","TypeError","name","code","charCodeAt","lexer","prefixes","defaultPattern","result","tryConsume","mustConsume","nextType","consumeText","name_1","pattern_1","parse","pathToRegexp","groups","source","match","regexpToRegexp","Array","isArray","paths","parts","map","join","arrayToRegexp","store","createGlobalStore","getMatcher","settings","matcher","registerBreadcrumb","breadcrumb","registerBreadcrumbs","breadcrumbs","prevBreadcrumbs","getBreadcrumbs","newBreadcrumbs","nextBreadcrumbs","setState","getState","getNext","filter","m","test","getExact","segments","split","pop","next","getClosest","filterBreadcrumbs","list","current","links","previous","parent","reverse","getBreadcrumbsFor"],"sourceRoot":""}