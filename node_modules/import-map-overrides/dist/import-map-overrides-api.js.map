{"version":3,"file":"import-map-overrides-api.js","sources":["../src/util/includes.js","../src/util/url-parameter.js","../src/api/js-api.js","../src/util/string-regex.js"],"sourcesContent":["export function includes(obj, item) {\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      if (obj[i] === item) {\n        return true;\n      }\n    }\n    return false;\n  } else if (typeof obj === \"string\") {\n    return obj.indexOf(item) >= 0;\n  } else {\n    throw Error(`Can't call includes on ${typeof obj}`);\n  }\n}\n","// https://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript\nexport function getParameterByName(name, url = window.location.href) {\n  name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n  var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n    results = regex.exec(url);\n  if (!results) return null;\n  if (!results[2]) return \"\";\n  return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n}\n","import { escapeStringRegexp } from \"../util/string-regex\";\nimport { includes } from \"../util/includes.js\";\nimport { getParameterByName } from \"../util/url-parameter\";\n\nconst localStoragePrefix = \"import-map-override:\";\nconst disabledOverridesLocalStorageKey = \"import-map-overrides-disabled\";\nconst externalOverridesLocalStorageKey = \"import-map-overrides-external-maps\";\nconst overrideAttribute = \"data-is-importmap-override\";\nconst domainsMeta = \"import-map-overrides-domains\";\nconst allowListPrefix = \"allowlist:\";\nconst denyListPrefix = \"denylist:\";\nexport const queryParamOverridesName = \"imo\";\n\nconst importMapMetaElement = document.querySelector(\n  'meta[name=\"importmap-type\"]'\n);\n\nconst domainsElement = document.querySelector(`meta[name=\"${domainsMeta}\"]`);\n\nconst externalOverrideMapPromises = {};\n\nexport const importMapType = importMapMetaElement\n  ? importMapMetaElement.getAttribute(\"content\")\n  : \"importmap\";\n\nexport let isDisabled;\n\nif (domainsElement) {\n  const content = domainsElement.getAttribute(\"content\");\n  if (!content) {\n    console.warn(`Invalid ${domainsMeta} meta element - content required.`);\n  }\n\n  const matchHostname = (domain) =>\n    new RegExp(escapeStringRegexp(domain).replace(\"\\\\*\", \".+\")).test(\n      window.location.hostname\n    );\n\n  if (content.indexOf(allowListPrefix) === 0) {\n    const allowedDomains = content.slice(allowListPrefix.length).split(\",\");\n    isDisabled = !allowedDomains.some(matchHostname);\n  } else if (content.indexOf(denyListPrefix) === 0) {\n    const deniedDomains = content.slice(denyListPrefix.length).split(\",\");\n    isDisabled = deniedDomains.some(matchHostname);\n  } else {\n    // eslint-disable-next-line no-console\n    console.log(\n      `Invalid ${domainsMeta} meta content attribute - must start with ${allowListPrefix} or ${denyListPrefix}`\n    );\n  }\n} else {\n  isDisabled = false;\n}\n\nif (!canAccessLocalStorage()) {\n  console.warn(\n    \"Disabling import-map-overrides, since local storage is not readable\"\n  );\n  isDisabled = true;\n}\n\nif (!isDisabled) {\n  init();\n}\n\nfunction init() {\n  const serverOverrides = importMapMetaElement\n    ? importMapMetaElement.hasAttribute(\"server-cookie\")\n    : false;\n  const serverOnly = importMapMetaElement\n    ? importMapMetaElement.hasAttribute(\"server-only\")\n    : false;\n\n  let defaultMapPromise;\n\n  window.importMapOverrides = {\n    addOverride(moduleName, url) {\n      const portRegex = /^\\d+$/g;\n      if (portRegex.test(url)) {\n        url = imo.getUrlFromPort(moduleName, url);\n      }\n      const key = localStoragePrefix + moduleName;\n      localStorage.setItem(key, url);\n      if (serverOverrides) {\n        document.cookie = `${key}=${url}`;\n      }\n      fireChangedEvent();\n      return imo.getOverrideMap();\n    },\n    getOverrideMap(includeDisabled = false) {\n      const overrides = createEmptyImportMap();\n      const disabledOverrides = imo.getDisabledOverrides();\n\n      const setOverride = (moduleName, path) => {\n        if (includeDisabled || !(disabledOverrides.indexOf(moduleName) >= 0)) {\n          overrides.imports[moduleName] = path;\n        }\n      };\n\n      // get from localstorage\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key.indexOf(localStoragePrefix) === 0) {\n          setOverride(\n            key.slice(localStoragePrefix.length),\n            localStorage.getItem(key)\n          );\n        }\n      }\n\n      // get from url if query param exist\n      const queryParam = getParameterByName(\n        queryParamOverridesName,\n        window.location != window.parent.location\n          ? document.referrer\n          : window.location.href\n      );\n\n      if (queryParam) {\n        let queryParamImportMap;\n        try {\n          queryParamImportMap = JSON.parse(queryParam);\n        } catch (e) {\n          throw Error(\n            `Invalid importMap query param - text content must be json`\n          );\n        }\n        Object.keys(queryParamImportMap.imports).forEach((moduleName) => {\n          setOverride(moduleName, queryParamImportMap.imports[moduleName]);\n        });\n      }\n\n      return overrides;\n    },\n    removeOverride(moduleName) {\n      const key = localStoragePrefix + moduleName;\n      const hasItem = localStorage.getItem(key) !== null;\n      localStorage.removeItem(key);\n      if (serverOverrides) {\n        document.cookie = `${key}=; expires=Thu, 01 Jan 1970 00:00:01 GMT;`;\n      }\n      imo.enableOverride(moduleName);\n      fireChangedEvent();\n      return hasItem;\n    },\n    resetOverrides() {\n      Object.keys(imo.getOverrideMap(true).imports).forEach((moduleName) => {\n        imo.removeOverride(moduleName);\n      });\n      localStorage.removeItem(disabledOverridesLocalStorageKey);\n      localStorage.removeItem(externalOverridesLocalStorageKey);\n      fireChangedEvent();\n      return imo.getOverrideMap();\n    },\n    hasOverrides() {\n      return Object.keys(imo.getOverrideMap().imports).length > 0;\n    },\n    getUrlFromPort(moduleName, port) {\n      const fileName = moduleName.replace(/@/g, \"\").replace(/\\//g, \"-\");\n      return `//localhost:${port}/${fileName}.js`;\n    },\n    enableUI() {\n      const customElementName = \"import-map-overrides-full\";\n      const showWhenLocalStorage = \"show-when-local-storage\";\n      let customElement = document.querySelector(customElementName);\n\n      if (!customElement) {\n        customElement = document.createElement(customElementName);\n        customElement.setAttribute(showWhenLocalStorage, \"true\");\n        document.body.appendChild(customElement);\n      }\n\n      const localStorageKey = customElement.getAttribute(showWhenLocalStorage);\n      if (localStorageKey) {\n        localStorage.setItem(localStorageKey, true);\n        customElement.renderWithPreact();\n      }\n    },\n    mergeImportMap(originalMap, newMap) {\n      const outMap = createEmptyImportMap();\n      for (let i in originalMap.imports) {\n        outMap.imports[i] = originalMap.imports[i];\n      }\n      for (let i in newMap.imports) {\n        outMap.imports[i] = newMap.imports[i];\n      }\n      for (let i in originalMap.scopes) {\n        outMap.scopes[i] = originalMap.scopes[i];\n      }\n      for (let i in newMap.scopes) {\n        outMap.scopes[i] = newMap.scopes[i];\n      }\n      return outMap;\n    },\n    getDefaultMap() {\n      return (\n        defaultMapPromise ||\n        (defaultMapPromise = Array.prototype.reduce.call(\n          document.querySelectorAll(\n            `script[type=\"${importMapType}\"], script[type=\"overridable-importmap\"]`\n          ),\n          (promise, scriptEl) => {\n            if (scriptEl.hasAttribute(overrideAttribute)) {\n              return promise;\n            } else {\n              let nextPromise;\n              if (scriptEl.src) {\n                nextPromise = fetchExternalMap(scriptEl.src);\n              } else {\n                nextPromise = Promise.resolve(JSON.parse(scriptEl.textContent));\n              }\n\n              return Promise.all([\n                promise,\n                nextPromise,\n              ]).then(([originalMap, newMap]) =>\n                imo.mergeImportMap(originalMap, newMap)\n              );\n            }\n          },\n          Promise.resolve(createEmptyImportMap())\n        ))\n      );\n    },\n    getCurrentPageMap() {\n      return Promise.all([\n        imo.getDefaultMap(),\n        imo.getExternalOverrideMap(imo.getCurrentPageExternalOverrides()),\n      ]).then(([defaultMap, externalOverridesMap]) => {\n        return imo.mergeImportMap(\n          imo.mergeImportMap(defaultMap, externalOverridesMap),\n          initialOverrideMap\n        );\n      });\n    },\n    getCurrentPageExternalOverrides() {\n      const currentPageExternalOverrides = [];\n      document\n        .querySelectorAll(\n          `[${overrideAttribute}]:not([id=\"import-map-overrides\"])`\n        )\n        .forEach((externalOverrideEl) => {\n          currentPageExternalOverrides.push(externalOverrideEl.src);\n        });\n      return currentPageExternalOverrides;\n    },\n    getNextPageMap() {\n      return Promise.all([\n        imo.getDefaultMap(),\n        imo.getExternalOverrideMap(),\n      ]).then(([defaultMap, externalOverridesMap]) => {\n        return imo.mergeImportMap(\n          imo.mergeImportMap(defaultMap, externalOverridesMap),\n          imo.getOverrideMap()\n        );\n      });\n    },\n    disableOverride(moduleName) {\n      const disabledOverrides = imo.getDisabledOverrides();\n      if (!includes(disabledOverrides, moduleName)) {\n        localStorage.setItem(\n          disabledOverridesLocalStorageKey,\n          JSON.stringify(disabledOverrides.concat(moduleName))\n        );\n        fireChangedEvent();\n        return true;\n      } else {\n        return false;\n      }\n    },\n    enableOverride(moduleName) {\n      const disabledOverrides = imo.getDisabledOverrides();\n      const index = disabledOverrides.indexOf(moduleName);\n      if (index >= 0) {\n        disabledOverrides.splice(index, 1);\n        localStorage.setItem(\n          disabledOverridesLocalStorageKey,\n          JSON.stringify(disabledOverrides)\n        );\n        fireChangedEvent();\n        return true;\n      } else {\n        return false;\n      }\n    },\n    getDisabledOverrides() {\n      const disabledOverrides = localStorage.getItem(\n        disabledOverridesLocalStorageKey\n      );\n      return disabledOverrides ? JSON.parse(disabledOverrides) : [];\n    },\n    isDisabled(moduleName) {\n      return includes(imo.getDisabledOverrides(), moduleName);\n    },\n    getExternalOverrides() {\n      let localStorageValue = localStorage.getItem(\n        externalOverridesLocalStorageKey\n      );\n      return localStorageValue ? JSON.parse(localStorageValue).sort() : [];\n    },\n    addExternalOverride(url) {\n      url = new URL(url, document.baseURI).href;\n      const overrides = imo.getExternalOverrides();\n      if (includes(overrides, url)) {\n        return false;\n      } else {\n        localStorage.setItem(\n          externalOverridesLocalStorageKey,\n          JSON.stringify(overrides.concat(url))\n        );\n        fireChangedEvent();\n        return true;\n      }\n    },\n    removeExternalOverride(url) {\n      const overrides = imo.getExternalOverrides();\n      if (includes(overrides, url)) {\n        localStorage.setItem(\n          externalOverridesLocalStorageKey,\n          JSON.stringify(overrides.filter((override) => override !== url))\n        );\n        fireChangedEvent();\n        return true;\n      } else {\n        return false;\n      }\n    },\n    getExternalOverrideMap(externalOverrides = imo.getExternalOverrides()) {\n      return externalOverrides.reduce((result, externalOverride) => {\n        const fetchPromise =\n          externalOverrideMapPromises[externalOverride] ||\n          (externalOverrideMapPromises[externalOverride] = fetchExternalMap(\n            externalOverride\n          ));\n        return Promise.all([result, fetchPromise]).then(\n          ([firstMap, secondMap]) => {\n            return imo.mergeImportMap(firstMap, secondMap);\n          }\n        );\n      }, Promise.resolve(createEmptyImportMap()));\n    },\n    isExternalMapValid(importMapUrl) {\n      const promise =\n        externalOverrideMapPromises[importMapUrl] ||\n        (externalOverrideMapPromises[importMapUrl] = fetchExternalMap(\n          importMapUrl\n        ));\n      return promise.then(() =>\n        includes(imo.invalidExternalMaps, importMapUrl)\n      );\n    },\n    invalidExternalMaps: [],\n  };\n\n  const imo = window.importMapOverrides;\n\n  let canFireCustomEvents = true;\n  try {\n    if (CustomEvent) {\n      new CustomEvent(\"a\");\n    } else {\n      canFireCustomEvents = false;\n    }\n  } catch (err) {\n    canFireCustomEvents = false;\n  }\n\n  function fireChangedEvent() {\n    fireEvent(\"change\");\n  }\n\n  function fireEvent(type) {\n    // Set timeout so that event fires after the change has totally finished\n    setTimeout(() => {\n      const eventType = `import-map-overrides:${type}`;\n      const event = canFireCustomEvents\n        ? new CustomEvent(eventType)\n        : document.createEvent(\"CustomEvent\");\n      if (!canFireCustomEvents) {\n        event.initCustomEvent(eventType, true, true, null);\n      }\n      window.dispatchEvent(event);\n    });\n  }\n\n  const initialOverrideMap = imo.getOverrideMap();\n  const initialExternalOverrideMaps = imo.getExternalOverrides();\n\n  let referenceNode;\n\n  if (!serverOnly) {\n    const overridableImportMap = document.querySelector(\n      'script[type=\"overridable-importmap\"]'\n    );\n\n    referenceNode = overridableImportMap;\n\n    if (!referenceNode) {\n      const importMaps = document.querySelectorAll(\n        `script[type=\"${importMapType}\"]`\n      );\n      referenceNode = importMaps ? importMaps[importMaps.length - 1] : null;\n    }\n\n    if (overridableImportMap) {\n      if (overridableImportMap.src) {\n        throw Error(\n          `import-map-overrides: external import maps with type=\"overridable-importmap\" are not supported`\n        );\n      }\n      let originalMap;\n      try {\n        originalMap = JSON.parse(overridableImportMap.textContent);\n      } catch (e) {\n        throw Error(\n          `Invalid <script type=\"overridable-importmap\"> - text content must be json`\n        );\n      }\n\n      referenceNode = insertOverrideMap(\n        imo.mergeImportMap(originalMap, initialOverrideMap),\n        `import-map-overrides`,\n        referenceNode\n      );\n      insertAllExternalOverrideMaps();\n    } else {\n      insertAllExternalOverrideMaps();\n      if (Object.keys(initialOverrideMap.imports).length > 0) {\n        referenceNode = insertOverrideMap(\n          initialOverrideMap,\n          `import-map-overrides`,\n          referenceNode\n        );\n      }\n    }\n  }\n\n  fireEvent(\"init\");\n\n  function insertOverrideMap(map, id, referenceNode) {\n    const overrideMapElement = document.createElement(\"script\");\n    overrideMapElement.type = importMapType;\n    overrideMapElement.id = id; // for debugging and for UI to identify this import map as special\n    overrideMapElement.setAttribute(overrideAttribute, \"\");\n    if (typeof map === \"string\") {\n      overrideMapElement.src = map;\n    } else {\n      overrideMapElement.textContent = JSON.stringify(map, null, 2);\n    }\n\n    if (referenceNode) {\n      referenceNode.insertAdjacentElement(\"afterend\", overrideMapElement);\n    } else {\n      document.head.appendChild(overrideMapElement);\n    }\n\n    return overrideMapElement;\n  }\n\n  function fetchExternalMap(url) {\n    return fetch(url).then(\n      (r) => {\n        if (r.ok) {\n          return r.json().catch((err) => {\n            console.warn(\n              Error(\n                `External override import map contained invalid json, at url ${r.url}. ${err}`\n              )\n            );\n            imo.invalidExternalMaps.push(r.url);\n            return createEmptyImportMap();\n          });\n        } else {\n          console.warn(\n            Error(\n              `Unable to download external override import map from url ${r.url}. Server responded with status ${r.status}`\n            )\n          );\n          imo.invalidExternalMaps.push(r.url);\n          return createEmptyImportMap();\n        }\n      },\n      () => {\n        console.warn(\n          Error(`Unable to download external import map at url '${url}'`)\n        );\n        imo.invalidExternalMaps.push(new URL(url, document.baseURI).href);\n        return createEmptyImportMap();\n      }\n    );\n  }\n\n  function createEmptyImportMap() {\n    return { imports: {}, scopes: {} };\n  }\n\n  function insertAllExternalOverrideMaps() {\n    if (initialExternalOverrideMaps.length > 0) {\n      initialExternalOverrideMaps.forEach((mapUrl, index) => {\n        referenceNode = insertOverrideMap(\n          mapUrl,\n          `import-map-overrides-external-${index}`\n        );\n      });\n    }\n  }\n}\n\nfunction canAccessLocalStorage() {\n  try {\n    localStorage.getItem(\"test\");\n    return true;\n  } catch {\n    return false;\n  }\n}\n","// from https://github.com/sindresorhus/escape-string-regexp\nexport const escapeStringRegexp = (string) => {\n  if (typeof string !== \"string\") {\n    throw new TypeError(\"Expected a string\");\n  }\n\n  // Escape characters with special meaning either inside or outside character sets.\n  // Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n  return string.replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\").replace(/-/g, \"\\\\x2d\");\n};\n"],"names":["includes","obj","item","Array","isArray","i","length","indexOf","Error","getParameterByName","name","url","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent","isDisabled","localStoragePrefix","disabledOverridesLocalStorageKey","externalOverridesLocalStorageKey","overrideAttribute","domainsMeta","allowListPrefix","denyListPrefix","importMapMetaElement","document","querySelector","domainsElement","externalOverrideMapPromises","importMapType","getAttribute","content","console","warn","matchHostname","domain","string","TypeError","escapeStringRegexp","test","hostname","slice","split","some","log","localStorage","getItem","canAccessLocalStorage","defaultMapPromise","serverOverrides","hasAttribute","serverOnly","importMapOverrides","addOverride","moduleName","imo","getUrlFromPort","key","setItem","cookie","fireChangedEvent","getOverrideMap","includeDisabled","overrides","imports","scopes","disabledOverrides","getDisabledOverrides","setOverride","path","queryParam","parent","referrer","queryParamImportMap","JSON","parse","e","Object","keys","forEach","removeOverride","hasItem","removeItem","enableOverride","resetOverrides","hasOverrides","port","fileName","enableUI","customElementName","showWhenLocalStorage","customElement","createElement","setAttribute","body","appendChild","localStorageKey","renderWithPreact","mergeImportMap","originalMap","newMap","outMap","getDefaultMap","prototype","reduce","call","querySelectorAll","promise","scriptEl","nextPromise","src","fetchExternalMap","Promise","resolve","textContent","all","then","getCurrentPageMap","getExternalOverrideMap","getCurrentPageExternalOverrides","defaultMap","externalOverridesMap","initialOverrideMap","currentPageExternalOverrides","externalOverrideEl","push","getNextPageMap","disableOverride","stringify","concat","index","splice","getExternalOverrides","localStorageValue","sort","addExternalOverride","URL","baseURI","removeExternalOverride","filter","override","result","externalOverride","fetchPromise","firstMap","secondMap","isExternalMapValid","importMapUrl","invalidExternalMaps","canFireCustomEvents","CustomEvent","err","fireEvent","type","setTimeout","eventType","event","createEvent","initCustomEvent","dispatchEvent","referenceNode","initialExternalOverrideMaps","overridableImportMap","importMaps","insertOverrideMap","insertAllExternalOverrideMaps","map","id","overrideMapElement","insertAdjacentElement","head","fetch","r","ok","json","catch","status","mapUrl","init"],"mappings":"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"}